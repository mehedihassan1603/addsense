import React, { useEffect, useState } from "react";
import useAxiosPublic from "../Authentication/Hook/useAxiosPublic";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import EditForm from "./EditForm";

const AllAds = () => {
    const axiosPublic = useAxiosPublic();
    const [ads, setAds] = useState([]);
    const [selectedAd, setSelectedAd] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axiosPublic.get("/ads");
                setAds(response.data);
            } catch (error) {
                console.error("Error fetching ads:", error);
            }
        };

        fetchData();
    }, [axiosPublic]);

    const handleEdit = (adId) => {
        // Set the selected ad for editing
        const adToEdit = ads.find((ad) => ad._id === adId);
        setSelectedAd(adToEdit);

        // Add logic for opening an edit form or modal
        console.log(`Editing ad with ID ${adId}`);
    };

    const handleEditSave = async (editedAd) => {
        try {
            // Make a PUT request to your server's /ads/:id endpoint
            const response = await axiosPublic.put(`/ads/${editedAd._id}`, editedAd);

            if (response.status === 200) {
                console.log(`Ad with ID ${editedAd._id} updated successfully`);
                // If update is successful, update the ads state or perform any necessary actions
                // For example, you can refetch the ads data to update the UI
                const updatedAds = ads.map((ad) => (ad._id === editedAd._id ? editedAd : ad));
                setAds(updatedAds);
            } else {
                console.error(`Failed to update ad with ID ${editedAd._id}`);
            }

            // Clear the selectedAd state after saving
            setSelectedAd(null);
        } catch (error) {
            console.error(`Error updating ad with ID ${editedAd._id}:`, error);
        }
    };

    const handleEditCancel = () => {
        // Clear the selectedAd state without saving changes
        setSelectedAd(null);
    };

    const handleDelete = async (adId) => {
        try {
            const response = await axiosPublic.delete(`/ads/${adId}`);
            console.log(response)
            if (response.status === 200) {
                console.log(`Ad with ID ${adId} deleted successfully`);
                toast.success("Delete successfully!", {
                    position: toast.POSITION.TOP_CENTER,
                    autoClose: 2000,
                  });
                const updatedAds = ads.filter((ad) => ad._id !== adId);
                setAds(updatedAds);
            } else {
                console.error(`Failed to delete ad with ID ${adId}`);
            }
        } catch (error) {
            console.error(`Error deleting ad with ID ${adId}:`, error);
        }
    };

    return (
        <div className="container mx-auto my-8">
            <h1 className="text-3xl font-bold mb-6">All Ads</h1>
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                {ads.map((ad) => (
                    <div key={ad._id} className="bg-white p-4 rounded-md shadow-md flex flex-col h-full">
                        <h2 className="text-lg font-semibold mb-2">{ad.name}</h2>
                        <div className="flex-grow mb-6">
                            <img src={ad.frame} className="w-full h-52 mb-4" alt="" />
                            <p className="text-center text-gray-600">Playtime: <span className="font-semibold">{ad.playtime}</span></p>
                            <p className="text-center text-gray-600">Reward Value: <span className="font-semibold">{ad.reward}</span></p>
                        </div>
                        <div className="flex justify-between mt-auto">
                        <button
                                className="mr-2 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700"
                                onClick={() => handleEdit(ad._id)}
                            >
                                Edit
                            </button>
                            <button
                                className="bg-red-500 text-white py-2 px-4 rounded hover:bg-red-700"
                                onClick={() => handleDelete(ad._id)}
                            >
                                Delete
                            </button>
                        </div>
                    </div>
                ))}
            </div>
            {selectedAd && (
                <EditForm
                    ad={selectedAd}
                    onSave={handleEditSave}
                    onCancel={handleEditCancel}
                />
            )}
            <ToastContainer></ToastContainer>
        </div>
    );
};

export default AllAds;
